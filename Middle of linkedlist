Given a singly linked list of 'N' nodes. 
The objective is to determine the middle node of a singly linked list. However, if the list has an even number of nodes, we return the second middle node.

/*
Following is the class structure of the Node class:

class Node
{
public:
    int data;
    Node *next;
    Node()
    {
        this->data = 0;
        next = NULL;
    }
    Node(int data)
    {
        this->data = data; 
        this->next = NULL;
    }
    Node(int data, Node* next)
    {
        this->data = data;
        this->next = next;
    }
};
*/
int getlength(Node* head){
     int len=0;
     while(head != NULL){
         len++;
         head=head->next;
     }
     return len;
}

Node *findMiddle(Node *head) {
    int length=getlength(head);
    int ans=(length/2) ;
    Node* temp=head;
    int cnt=0;
    while(cnt < ans){
        temp=temp->next;
        cnt++;
    }
    return temp;
    }

