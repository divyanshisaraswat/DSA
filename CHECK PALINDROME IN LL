/*
class Node {
  public:
    int data;
    Node *next;

    Node(int x) {
       data = x;
       next = NULL;
    }
};
*/
#include<vector>
class Solution {
private:
    
 Node* getMiddle(Node* head){
     Node* slow=head;
     Node* fast= head->next;
     
    while(fast != NULL && fast -> next != NULL){
        fast = fast -> next -> next;
        slow=slow->next;
    } 
     return slow;
 } 
 
 Node* reverse(Node * head){
     Node* curr= head;
     Node* prev = NULL;
     Node* next= NULL;
     
     while( curr != NULL){
         next = curr -> next;
         curr -> next = prev;
         prev = curr;
         curr = next;
     }
     return prev;
 }
 
  public:
    bool isPalindrome(Node *head) {
    
    if(head -> next == NULL){
        return true;
    }
    
    //step 1: find middle
    Node* middle= getMiddle(head);
     Node* temp = middle -> next;
     
     //step 2: reverse ll after middle
     middle -> next = reverse(temp);
     
     //step 3: compare the two parts
     Node* head1=head;
     Node* head2=middle->next;
     
     while(head2 != NULL){
         if(head2 -> data != head1->data){
             return 0;
         }
         
         head1=head1 -> next;
         head2=head2-> next;
     }   
         
         //step 4: again reverse the ll like original
     temp = middle -> next;
     middle -> next = reverse(temp);
     return true;
     
    }
};
