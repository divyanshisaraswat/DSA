/*
class Node {
  public:
    int data;
    Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/

class Solution {
    private:
Node* reverse(Node * head){                                                   
	     Node* curr= head;
	     Node* prev = NULL;
	     Node* next= NULL;
	     
	     while( curr != NULL){
	         next = curr -> next;
	         curr -> next = prev;
	         prev = curr;
	         curr = next;
	     }
	     return prev;
	 }
	 
 void insertAtTail(Node* &head,Node* & tail,int val){     
     
	     Node* temp=new Node(val);
	     if(head == NULL){
	         head=temp;
	         tail=temp;
	         return;
	     }
	     else {
	         tail -> next = temp;
	         tail = temp;
	     }
	 }
	 
Node* add(Node* head1, Node* head2){
	    int carry=0;
	    Node* anshead=NULL;
	    Node* anstail=NULL;
	    
	    while(head1 != NULL || head2 != NULL || carry != 0){
	        int val1=0;
	        if(head1 !=NULL){
	            val1=head1->data;
	        }
	        
	        int val2=0;
	        if(head2 != NULL){
	            val2=head2->data;
	        }
	        
	        int sum=carry + val1 + val2;
	        int digit= sum%10;
	        //create node and add ans in answer ll
	        insertAtTail(anshead,anstail,digit);    
	        carry = sum/10;
	        
	        if(head1 != NULL){
	        head1=head1->next;
	        }
	        if(head2 != NULL){
	        head2=head2->next;
	        }
	    }
          return anshead;	    
	}

  public:
    Node* addTwoLists(Node* head1, Node* head2) {
        
      //step 1- reverse a ll
      head1=reverse(head1);
      head2=reverse(head2);
      
      //step 2- add 2 ll
      Node* ans=add(head1,head2);
        
        //step 3- reverse ans;
        ans=reverse(ans);
        return ans;
    }
};
